// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xwudao/neter-template/internal/data/ent/siteconfig"
)

// SiteConfigCreate is the builder for creating a SiteConfig entity.
type SiteConfigCreate struct {
	config
	mutation *SiteConfigMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (scc *SiteConfigCreate) SetCreateTime(t time.Time) *SiteConfigCreate {
	scc.mutation.SetCreateTime(t)
	return scc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (scc *SiteConfigCreate) SetNillableCreateTime(t *time.Time) *SiteConfigCreate {
	if t != nil {
		scc.SetCreateTime(*t)
	}
	return scc
}

// SetUpdateTime sets the "update_time" field.
func (scc *SiteConfigCreate) SetUpdateTime(t time.Time) *SiteConfigCreate {
	scc.mutation.SetUpdateTime(t)
	return scc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (scc *SiteConfigCreate) SetNillableUpdateTime(t *time.Time) *SiteConfigCreate {
	if t != nil {
		scc.SetUpdateTime(*t)
	}
	return scc
}

// SetName sets the "name" field.
func (scc *SiteConfigCreate) SetName(s string) *SiteConfigCreate {
	scc.mutation.SetName(s)
	return scc
}

// SetConfig sets the "config" field.
func (scc *SiteConfigCreate) SetConfig(s string) *SiteConfigCreate {
	scc.mutation.SetConfig(s)
	return scc
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (scc *SiteConfigCreate) SetNillableConfig(s *string) *SiteConfigCreate {
	if s != nil {
		scc.SetConfig(*s)
	}
	return scc
}

// SetID sets the "id" field.
func (scc *SiteConfigCreate) SetID(i int64) *SiteConfigCreate {
	scc.mutation.SetID(i)
	return scc
}

// Mutation returns the SiteConfigMutation object of the builder.
func (scc *SiteConfigCreate) Mutation() *SiteConfigMutation {
	return scc.mutation
}

// Save creates the SiteConfig in the database.
func (scc *SiteConfigCreate) Save(ctx context.Context) (*SiteConfig, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SiteConfigCreate) SaveX(ctx context.Context) *SiteConfig {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SiteConfigCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SiteConfigCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *SiteConfigCreate) defaults() {
	if _, ok := scc.mutation.CreateTime(); !ok {
		v := siteconfig.DefaultCreateTime()
		scc.mutation.SetCreateTime(v)
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		v := siteconfig.DefaultUpdateTime()
		scc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SiteConfigCreate) check() error {
	if _, ok := scc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SiteConfig.create_time"`)}
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SiteConfig.update_time"`)}
	}
	if _, ok := scc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SiteConfig.name"`)}
	}
	if v, ok := scc.mutation.Name(); ok {
		if err := siteconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SiteConfig.name": %w`, err)}
		}
	}
	return nil
}

func (scc *SiteConfigCreate) sqlSave(ctx context.Context) (*SiteConfig, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *SiteConfigCreate) createSpec() (*SiteConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &SiteConfig{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(siteconfig.Table, sqlgraph.NewFieldSpec(siteconfig.FieldID, field.TypeInt64))
	)
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scc.mutation.CreateTime(); ok {
		_spec.SetField(siteconfig.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := scc.mutation.UpdateTime(); ok {
		_spec.SetField(siteconfig.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := scc.mutation.Name(); ok {
		_spec.SetField(siteconfig.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := scc.mutation.Config(); ok {
		_spec.SetField(siteconfig.FieldConfig, field.TypeString, value)
		_node.Config = value
	}
	return _node, _spec
}

// SiteConfigCreateBulk is the builder for creating many SiteConfig entities in bulk.
type SiteConfigCreateBulk struct {
	config
	err      error
	builders []*SiteConfigCreate
}

// Save creates the SiteConfig entities in the database.
func (sccb *SiteConfigCreateBulk) Save(ctx context.Context) ([]*SiteConfig, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SiteConfig, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SiteConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SiteConfigCreateBulk) SaveX(ctx context.Context) []*SiteConfig {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SiteConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SiteConfigCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
