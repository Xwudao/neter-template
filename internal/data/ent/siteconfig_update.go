// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xwudao/neter-template/internal/data/ent/predicate"
	"github.com/Xwudao/neter-template/internal/data/ent/siteconfig"
)

// SiteConfigUpdate is the builder for updating SiteConfig entities.
type SiteConfigUpdate struct {
	config
	hooks    []Hook
	mutation *SiteConfigMutation
}

// Where appends a list predicates to the SiteConfigUpdate builder.
func (scu *SiteConfigUpdate) Where(ps ...predicate.SiteConfig) *SiteConfigUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdateTime sets the "update_time" field.
func (scu *SiteConfigUpdate) SetUpdateTime(t time.Time) *SiteConfigUpdate {
	scu.mutation.SetUpdateTime(t)
	return scu
}

// SetName sets the "name" field.
func (scu *SiteConfigUpdate) SetName(s string) *SiteConfigUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scu *SiteConfigUpdate) SetNillableName(s *string) *SiteConfigUpdate {
	if s != nil {
		scu.SetName(*s)
	}
	return scu
}

// SetConfig sets the "config" field.
func (scu *SiteConfigUpdate) SetConfig(s string) *SiteConfigUpdate {
	scu.mutation.SetConfig(s)
	return scu
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (scu *SiteConfigUpdate) SetNillableConfig(s *string) *SiteConfigUpdate {
	if s != nil {
		scu.SetConfig(*s)
	}
	return scu
}

// ClearConfig clears the value of the "config" field.
func (scu *SiteConfigUpdate) ClearConfig() *SiteConfigUpdate {
	scu.mutation.ClearConfig()
	return scu
}

// Mutation returns the SiteConfigMutation object of the builder.
func (scu *SiteConfigUpdate) Mutation() *SiteConfigMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SiteConfigUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SiteConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SiteConfigUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SiteConfigUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SiteConfigUpdate) defaults() {
	if _, ok := scu.mutation.UpdateTime(); !ok {
		v := siteconfig.UpdateDefaultUpdateTime()
		scu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SiteConfigUpdate) check() error {
	if v, ok := scu.mutation.Name(); ok {
		if err := siteconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SiteConfig.name": %w`, err)}
		}
	}
	return nil
}

func (scu *SiteConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(siteconfig.Table, siteconfig.Columns, sqlgraph.NewFieldSpec(siteconfig.FieldID, field.TypeInt64))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdateTime(); ok {
		_spec.SetField(siteconfig.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.SetField(siteconfig.FieldName, field.TypeString, value)
	}
	if value, ok := scu.mutation.Config(); ok {
		_spec.SetField(siteconfig.FieldConfig, field.TypeString, value)
	}
	if scu.mutation.ConfigCleared() {
		_spec.ClearField(siteconfig.FieldConfig, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{siteconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SiteConfigUpdateOne is the builder for updating a single SiteConfig entity.
type SiteConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteConfigMutation
}

// SetUpdateTime sets the "update_time" field.
func (scuo *SiteConfigUpdateOne) SetUpdateTime(t time.Time) *SiteConfigUpdateOne {
	scuo.mutation.SetUpdateTime(t)
	return scuo
}

// SetName sets the "name" field.
func (scuo *SiteConfigUpdateOne) SetName(s string) *SiteConfigUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scuo *SiteConfigUpdateOne) SetNillableName(s *string) *SiteConfigUpdateOne {
	if s != nil {
		scuo.SetName(*s)
	}
	return scuo
}

// SetConfig sets the "config" field.
func (scuo *SiteConfigUpdateOne) SetConfig(s string) *SiteConfigUpdateOne {
	scuo.mutation.SetConfig(s)
	return scuo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (scuo *SiteConfigUpdateOne) SetNillableConfig(s *string) *SiteConfigUpdateOne {
	if s != nil {
		scuo.SetConfig(*s)
	}
	return scuo
}

// ClearConfig clears the value of the "config" field.
func (scuo *SiteConfigUpdateOne) ClearConfig() *SiteConfigUpdateOne {
	scuo.mutation.ClearConfig()
	return scuo
}

// Mutation returns the SiteConfigMutation object of the builder.
func (scuo *SiteConfigUpdateOne) Mutation() *SiteConfigMutation {
	return scuo.mutation
}

// Where appends a list predicates to the SiteConfigUpdate builder.
func (scuo *SiteConfigUpdateOne) Where(ps ...predicate.SiteConfig) *SiteConfigUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SiteConfigUpdateOne) Select(field string, fields ...string) *SiteConfigUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SiteConfig entity.
func (scuo *SiteConfigUpdateOne) Save(ctx context.Context) (*SiteConfig, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SiteConfigUpdateOne) SaveX(ctx context.Context) *SiteConfig {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SiteConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SiteConfigUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SiteConfigUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdateTime(); !ok {
		v := siteconfig.UpdateDefaultUpdateTime()
		scuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SiteConfigUpdateOne) check() error {
	if v, ok := scuo.mutation.Name(); ok {
		if err := siteconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SiteConfig.name": %w`, err)}
		}
	}
	return nil
}

func (scuo *SiteConfigUpdateOne) sqlSave(ctx context.Context) (_node *SiteConfig, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(siteconfig.Table, siteconfig.Columns, sqlgraph.NewFieldSpec(siteconfig.FieldID, field.TypeInt64))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SiteConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, siteconfig.FieldID)
		for _, f := range fields {
			if !siteconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != siteconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdateTime(); ok {
		_spec.SetField(siteconfig.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.SetField(siteconfig.FieldName, field.TypeString, value)
	}
	if value, ok := scuo.mutation.Config(); ok {
		_spec.SetField(siteconfig.FieldConfig, field.TypeString, value)
	}
	if scuo.mutation.ConfigCleared() {
		_spec.ClearField(siteconfig.FieldConfig, field.TypeString)
	}
	_node = &SiteConfig{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{siteconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
