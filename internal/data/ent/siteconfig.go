// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go-kitboxpro/internal/data/ent/siteconfig"
)

// SiteConfig is the model entity for the SiteConfig schema.
type SiteConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Config holds the value of the "config" field.
	Config       string `json:"config,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SiteConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case siteconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case siteconfig.FieldName, siteconfig.FieldConfig:
			values[i] = new(sql.NullString)
		case siteconfig.FieldCreateTime, siteconfig.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SiteConfig fields.
func (sc *SiteConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case siteconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int64(value.Int64)
		case siteconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sc.CreateTime = value.Time
			}
		case siteconfig.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sc.UpdateTime = value.Time
			}
		case siteconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sc.Name = value.String
			}
		case siteconfig.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				sc.Config = value.String
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SiteConfig.
// This includes values selected through modifiers, order, etc.
func (sc *SiteConfig) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// Update returns a builder for updating this SiteConfig.
// Note that you need to call SiteConfig.Unwrap() before calling this method if this SiteConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SiteConfig) Update() *SiteConfigUpdateOne {
	return NewSiteConfigClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SiteConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SiteConfig) Unwrap() *SiteConfig {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SiteConfig is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SiteConfig) String() string {
	var builder strings.Builder
	builder.WriteString("SiteConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(sc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sc.Name)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(sc.Config)
	builder.WriteByte(')')
	return builder.String()
}

// SiteConfigs is a parsable slice of SiteConfig.
type SiteConfigs []*SiteConfig
