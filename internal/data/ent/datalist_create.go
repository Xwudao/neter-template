// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xwudao/neter-template/internal/data/ent/datalist"
)

// DataListCreate is the builder for creating a DataList entity.
type DataListCreate struct {
	config
	mutation *DataListMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dlc *DataListCreate) SetCreateTime(t time.Time) *DataListCreate {
	dlc.mutation.SetCreateTime(t)
	return dlc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dlc *DataListCreate) SetNillableCreateTime(t *time.Time) *DataListCreate {
	if t != nil {
		dlc.SetCreateTime(*t)
	}
	return dlc
}

// SetUpdateTime sets the "update_time" field.
func (dlc *DataListCreate) SetUpdateTime(t time.Time) *DataListCreate {
	dlc.mutation.SetUpdateTime(t)
	return dlc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dlc *DataListCreate) SetNillableUpdateTime(t *time.Time) *DataListCreate {
	if t != nil {
		dlc.SetUpdateTime(*t)
	}
	return dlc
}

// SetLabel sets the "label" field.
func (dlc *DataListCreate) SetLabel(s string) *DataListCreate {
	dlc.mutation.SetLabel(s)
	return dlc
}

// SetKind sets the "kind" field.
func (dlc *DataListCreate) SetKind(s string) *DataListCreate {
	dlc.mutation.SetKind(s)
	return dlc
}

// SetKey sets the "key" field.
func (dlc *DataListCreate) SetKey(s string) *DataListCreate {
	dlc.mutation.SetKey(s)
	return dlc
}

// SetValue sets the "value" field.
func (dlc *DataListCreate) SetValue(s string) *DataListCreate {
	dlc.mutation.SetValue(s)
	return dlc
}

// SetItemOrder sets the "item_order" field.
func (dlc *DataListCreate) SetItemOrder(i int) *DataListCreate {
	dlc.mutation.SetItemOrder(i)
	return dlc
}

// SetNillableItemOrder sets the "item_order" field if the given value is not nil.
func (dlc *DataListCreate) SetNillableItemOrder(i *int) *DataListCreate {
	if i != nil {
		dlc.SetItemOrder(*i)
	}
	return dlc
}

// SetID sets the "id" field.
func (dlc *DataListCreate) SetID(i int64) *DataListCreate {
	dlc.mutation.SetID(i)
	return dlc
}

// Mutation returns the DataListMutation object of the builder.
func (dlc *DataListCreate) Mutation() *DataListMutation {
	return dlc.mutation
}

// Save creates the DataList in the database.
func (dlc *DataListCreate) Save(ctx context.Context) (*DataList, error) {
	dlc.defaults()
	return withHooks(ctx, dlc.sqlSave, dlc.mutation, dlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dlc *DataListCreate) SaveX(ctx context.Context) *DataList {
	v, err := dlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dlc *DataListCreate) Exec(ctx context.Context) error {
	_, err := dlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlc *DataListCreate) ExecX(ctx context.Context) {
	if err := dlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dlc *DataListCreate) defaults() {
	if _, ok := dlc.mutation.CreateTime(); !ok {
		v := datalist.DefaultCreateTime()
		dlc.mutation.SetCreateTime(v)
	}
	if _, ok := dlc.mutation.UpdateTime(); !ok {
		v := datalist.DefaultUpdateTime()
		dlc.mutation.SetUpdateTime(v)
	}
	if _, ok := dlc.mutation.ItemOrder(); !ok {
		v := datalist.DefaultItemOrder
		dlc.mutation.SetItemOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dlc *DataListCreate) check() error {
	if _, ok := dlc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "DataList.create_time"`)}
	}
	if _, ok := dlc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "DataList.update_time"`)}
	}
	if _, ok := dlc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "DataList.label"`)}
	}
	if v, ok := dlc.mutation.Label(); ok {
		if err := datalist.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "DataList.label": %w`, err)}
		}
	}
	if _, ok := dlc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "DataList.kind"`)}
	}
	if v, ok := dlc.mutation.Kind(); ok {
		if err := datalist.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "DataList.kind": %w`, err)}
		}
	}
	if _, ok := dlc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "DataList.key"`)}
	}
	if _, ok := dlc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "DataList.value"`)}
	}
	if v, ok := dlc.mutation.Value(); ok {
		if err := datalist.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DataList.value": %w`, err)}
		}
	}
	if _, ok := dlc.mutation.ItemOrder(); !ok {
		return &ValidationError{Name: "item_order", err: errors.New(`ent: missing required field "DataList.item_order"`)}
	}
	if v, ok := dlc.mutation.ItemOrder(); ok {
		if err := datalist.ItemOrderValidator(v); err != nil {
			return &ValidationError{Name: "item_order", err: fmt.Errorf(`ent: validator failed for field "DataList.item_order": %w`, err)}
		}
	}
	return nil
}

func (dlc *DataListCreate) sqlSave(ctx context.Context) (*DataList, error) {
	if err := dlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	dlc.mutation.id = &_node.ID
	dlc.mutation.done = true
	return _node, nil
}

func (dlc *DataListCreate) createSpec() (*DataList, *sqlgraph.CreateSpec) {
	var (
		_node = &DataList{config: dlc.config}
		_spec = sqlgraph.NewCreateSpec(datalist.Table, sqlgraph.NewFieldSpec(datalist.FieldID, field.TypeInt64))
	)
	if id, ok := dlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dlc.mutation.CreateTime(); ok {
		_spec.SetField(datalist.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dlc.mutation.UpdateTime(); ok {
		_spec.SetField(datalist.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dlc.mutation.Label(); ok {
		_spec.SetField(datalist.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := dlc.mutation.Kind(); ok {
		_spec.SetField(datalist.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := dlc.mutation.Key(); ok {
		_spec.SetField(datalist.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := dlc.mutation.Value(); ok {
		_spec.SetField(datalist.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := dlc.mutation.ItemOrder(); ok {
		_spec.SetField(datalist.FieldItemOrder, field.TypeInt, value)
		_node.ItemOrder = value
	}
	return _node, _spec
}

// DataListCreateBulk is the builder for creating many DataList entities in bulk.
type DataListCreateBulk struct {
	config
	err      error
	builders []*DataListCreate
}

// Save creates the DataList entities in the database.
func (dlcb *DataListCreateBulk) Save(ctx context.Context) ([]*DataList, error) {
	if dlcb.err != nil {
		return nil, dlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dlcb.builders))
	nodes := make([]*DataList, len(dlcb.builders))
	mutators := make([]Mutator, len(dlcb.builders))
	for i := range dlcb.builders {
		func(i int, root context.Context) {
			builder := dlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DataListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dlcb *DataListCreateBulk) SaveX(ctx context.Context) []*DataList {
	v, err := dlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dlcb *DataListCreateBulk) Exec(ctx context.Context) error {
	_, err := dlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlcb *DataListCreateBulk) ExecX(ctx context.Context) {
	if err := dlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
