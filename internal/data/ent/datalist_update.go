// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xwudao/neter-template/internal/data/ent/datalist"
	"github.com/Xwudao/neter-template/internal/data/ent/predicate"
)

// DataListUpdate is the builder for updating DataList entities.
type DataListUpdate struct {
	config
	hooks    []Hook
	mutation *DataListMutation
}

// Where appends a list predicates to the DataListUpdate builder.
func (dlu *DataListUpdate) Where(ps ...predicate.DataList) *DataListUpdate {
	dlu.mutation.Where(ps...)
	return dlu
}

// SetUpdateTime sets the "update_time" field.
func (dlu *DataListUpdate) SetUpdateTime(t time.Time) *DataListUpdate {
	dlu.mutation.SetUpdateTime(t)
	return dlu
}

// SetLabel sets the "label" field.
func (dlu *DataListUpdate) SetLabel(s string) *DataListUpdate {
	dlu.mutation.SetLabel(s)
	return dlu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (dlu *DataListUpdate) SetNillableLabel(s *string) *DataListUpdate {
	if s != nil {
		dlu.SetLabel(*s)
	}
	return dlu
}

// SetKind sets the "kind" field.
func (dlu *DataListUpdate) SetKind(s string) *DataListUpdate {
	dlu.mutation.SetKind(s)
	return dlu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (dlu *DataListUpdate) SetNillableKind(s *string) *DataListUpdate {
	if s != nil {
		dlu.SetKind(*s)
	}
	return dlu
}

// SetKey sets the "key" field.
func (dlu *DataListUpdate) SetKey(s string) *DataListUpdate {
	dlu.mutation.SetKey(s)
	return dlu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (dlu *DataListUpdate) SetNillableKey(s *string) *DataListUpdate {
	if s != nil {
		dlu.SetKey(*s)
	}
	return dlu
}

// SetValue sets the "value" field.
func (dlu *DataListUpdate) SetValue(s string) *DataListUpdate {
	dlu.mutation.SetValue(s)
	return dlu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (dlu *DataListUpdate) SetNillableValue(s *string) *DataListUpdate {
	if s != nil {
		dlu.SetValue(*s)
	}
	return dlu
}

// SetItemOrder sets the "item_order" field.
func (dlu *DataListUpdate) SetItemOrder(i int) *DataListUpdate {
	dlu.mutation.ResetItemOrder()
	dlu.mutation.SetItemOrder(i)
	return dlu
}

// SetNillableItemOrder sets the "item_order" field if the given value is not nil.
func (dlu *DataListUpdate) SetNillableItemOrder(i *int) *DataListUpdate {
	if i != nil {
		dlu.SetItemOrder(*i)
	}
	return dlu
}

// AddItemOrder adds i to the "item_order" field.
func (dlu *DataListUpdate) AddItemOrder(i int) *DataListUpdate {
	dlu.mutation.AddItemOrder(i)
	return dlu
}

// Mutation returns the DataListMutation object of the builder.
func (dlu *DataListUpdate) Mutation() *DataListMutation {
	return dlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dlu *DataListUpdate) Save(ctx context.Context) (int, error) {
	dlu.defaults()
	return withHooks(ctx, dlu.sqlSave, dlu.mutation, dlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dlu *DataListUpdate) SaveX(ctx context.Context) int {
	affected, err := dlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dlu *DataListUpdate) Exec(ctx context.Context) error {
	_, err := dlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dlu *DataListUpdate) ExecX(ctx context.Context) {
	if err := dlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dlu *DataListUpdate) defaults() {
	if _, ok := dlu.mutation.UpdateTime(); !ok {
		v := datalist.UpdateDefaultUpdateTime()
		dlu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dlu *DataListUpdate) check() error {
	if v, ok := dlu.mutation.Label(); ok {
		if err := datalist.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "DataList.label": %w`, err)}
		}
	}
	if v, ok := dlu.mutation.Kind(); ok {
		if err := datalist.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "DataList.kind": %w`, err)}
		}
	}
	if v, ok := dlu.mutation.Value(); ok {
		if err := datalist.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DataList.value": %w`, err)}
		}
	}
	if v, ok := dlu.mutation.ItemOrder(); ok {
		if err := datalist.ItemOrderValidator(v); err != nil {
			return &ValidationError{Name: "item_order", err: fmt.Errorf(`ent: validator failed for field "DataList.item_order": %w`, err)}
		}
	}
	return nil
}

func (dlu *DataListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(datalist.Table, datalist.Columns, sqlgraph.NewFieldSpec(datalist.FieldID, field.TypeInt64))
	if ps := dlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dlu.mutation.UpdateTime(); ok {
		_spec.SetField(datalist.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dlu.mutation.Label(); ok {
		_spec.SetField(datalist.FieldLabel, field.TypeString, value)
	}
	if value, ok := dlu.mutation.Kind(); ok {
		_spec.SetField(datalist.FieldKind, field.TypeString, value)
	}
	if value, ok := dlu.mutation.Key(); ok {
		_spec.SetField(datalist.FieldKey, field.TypeString, value)
	}
	if value, ok := dlu.mutation.Value(); ok {
		_spec.SetField(datalist.FieldValue, field.TypeString, value)
	}
	if value, ok := dlu.mutation.ItemOrder(); ok {
		_spec.SetField(datalist.FieldItemOrder, field.TypeInt, value)
	}
	if value, ok := dlu.mutation.AddedItemOrder(); ok {
		_spec.AddField(datalist.FieldItemOrder, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datalist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dlu.mutation.done = true
	return n, nil
}

// DataListUpdateOne is the builder for updating a single DataList entity.
type DataListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DataListMutation
}

// SetUpdateTime sets the "update_time" field.
func (dluo *DataListUpdateOne) SetUpdateTime(t time.Time) *DataListUpdateOne {
	dluo.mutation.SetUpdateTime(t)
	return dluo
}

// SetLabel sets the "label" field.
func (dluo *DataListUpdateOne) SetLabel(s string) *DataListUpdateOne {
	dluo.mutation.SetLabel(s)
	return dluo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (dluo *DataListUpdateOne) SetNillableLabel(s *string) *DataListUpdateOne {
	if s != nil {
		dluo.SetLabel(*s)
	}
	return dluo
}

// SetKind sets the "kind" field.
func (dluo *DataListUpdateOne) SetKind(s string) *DataListUpdateOne {
	dluo.mutation.SetKind(s)
	return dluo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (dluo *DataListUpdateOne) SetNillableKind(s *string) *DataListUpdateOne {
	if s != nil {
		dluo.SetKind(*s)
	}
	return dluo
}

// SetKey sets the "key" field.
func (dluo *DataListUpdateOne) SetKey(s string) *DataListUpdateOne {
	dluo.mutation.SetKey(s)
	return dluo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (dluo *DataListUpdateOne) SetNillableKey(s *string) *DataListUpdateOne {
	if s != nil {
		dluo.SetKey(*s)
	}
	return dluo
}

// SetValue sets the "value" field.
func (dluo *DataListUpdateOne) SetValue(s string) *DataListUpdateOne {
	dluo.mutation.SetValue(s)
	return dluo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (dluo *DataListUpdateOne) SetNillableValue(s *string) *DataListUpdateOne {
	if s != nil {
		dluo.SetValue(*s)
	}
	return dluo
}

// SetItemOrder sets the "item_order" field.
func (dluo *DataListUpdateOne) SetItemOrder(i int) *DataListUpdateOne {
	dluo.mutation.ResetItemOrder()
	dluo.mutation.SetItemOrder(i)
	return dluo
}

// SetNillableItemOrder sets the "item_order" field if the given value is not nil.
func (dluo *DataListUpdateOne) SetNillableItemOrder(i *int) *DataListUpdateOne {
	if i != nil {
		dluo.SetItemOrder(*i)
	}
	return dluo
}

// AddItemOrder adds i to the "item_order" field.
func (dluo *DataListUpdateOne) AddItemOrder(i int) *DataListUpdateOne {
	dluo.mutation.AddItemOrder(i)
	return dluo
}

// Mutation returns the DataListMutation object of the builder.
func (dluo *DataListUpdateOne) Mutation() *DataListMutation {
	return dluo.mutation
}

// Where appends a list predicates to the DataListUpdate builder.
func (dluo *DataListUpdateOne) Where(ps ...predicate.DataList) *DataListUpdateOne {
	dluo.mutation.Where(ps...)
	return dluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dluo *DataListUpdateOne) Select(field string, fields ...string) *DataListUpdateOne {
	dluo.fields = append([]string{field}, fields...)
	return dluo
}

// Save executes the query and returns the updated DataList entity.
func (dluo *DataListUpdateOne) Save(ctx context.Context) (*DataList, error) {
	dluo.defaults()
	return withHooks(ctx, dluo.sqlSave, dluo.mutation, dluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dluo *DataListUpdateOne) SaveX(ctx context.Context) *DataList {
	node, err := dluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dluo *DataListUpdateOne) Exec(ctx context.Context) error {
	_, err := dluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dluo *DataListUpdateOne) ExecX(ctx context.Context) {
	if err := dluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dluo *DataListUpdateOne) defaults() {
	if _, ok := dluo.mutation.UpdateTime(); !ok {
		v := datalist.UpdateDefaultUpdateTime()
		dluo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dluo *DataListUpdateOne) check() error {
	if v, ok := dluo.mutation.Label(); ok {
		if err := datalist.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "DataList.label": %w`, err)}
		}
	}
	if v, ok := dluo.mutation.Kind(); ok {
		if err := datalist.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "DataList.kind": %w`, err)}
		}
	}
	if v, ok := dluo.mutation.Value(); ok {
		if err := datalist.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DataList.value": %w`, err)}
		}
	}
	if v, ok := dluo.mutation.ItemOrder(); ok {
		if err := datalist.ItemOrderValidator(v); err != nil {
			return &ValidationError{Name: "item_order", err: fmt.Errorf(`ent: validator failed for field "DataList.item_order": %w`, err)}
		}
	}
	return nil
}

func (dluo *DataListUpdateOne) sqlSave(ctx context.Context) (_node *DataList, err error) {
	if err := dluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(datalist.Table, datalist.Columns, sqlgraph.NewFieldSpec(datalist.FieldID, field.TypeInt64))
	id, ok := dluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DataList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datalist.FieldID)
		for _, f := range fields {
			if !datalist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != datalist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dluo.mutation.UpdateTime(); ok {
		_spec.SetField(datalist.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dluo.mutation.Label(); ok {
		_spec.SetField(datalist.FieldLabel, field.TypeString, value)
	}
	if value, ok := dluo.mutation.Kind(); ok {
		_spec.SetField(datalist.FieldKind, field.TypeString, value)
	}
	if value, ok := dluo.mutation.Key(); ok {
		_spec.SetField(datalist.FieldKey, field.TypeString, value)
	}
	if value, ok := dluo.mutation.Value(); ok {
		_spec.SetField(datalist.FieldValue, field.TypeString, value)
	}
	if value, ok := dluo.mutation.ItemOrder(); ok {
		_spec.SetField(datalist.FieldItemOrder, field.TypeInt, value)
	}
	if value, ok := dluo.mutation.AddedItemOrder(); ok {
		_spec.AddField(datalist.FieldItemOrder, field.TypeInt, value)
	}
	_node = &DataList{config: dluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datalist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dluo.mutation.done = true
	return _node, nil
}
