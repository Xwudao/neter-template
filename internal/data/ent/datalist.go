// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go-kitboxpro/internal/data/ent/datalist"
)

// DataList is the model entity for the DataList schema.
type DataList struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 标签
	Label string `json:"label,omitempty"`
	// 分类
	Kind string `json:"kind,omitempty"`
	// 和kind组合成唯一索引
	Key string `json:"key,omitempty"`
	// 内容，一般为json格式
	Value string `json:"value,omitempty"`
	// 排序
	ItemOrder    int `json:"item_order,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DataList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case datalist.FieldID, datalist.FieldItemOrder:
			values[i] = new(sql.NullInt64)
		case datalist.FieldLabel, datalist.FieldKind, datalist.FieldKey, datalist.FieldValue:
			values[i] = new(sql.NullString)
		case datalist.FieldCreateTime, datalist.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DataList fields.
func (dl *DataList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case datalist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dl.ID = int64(value.Int64)
		case datalist.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dl.CreateTime = value.Time
			}
		case datalist.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dl.UpdateTime = value.Time
			}
		case datalist.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				dl.Label = value.String
			}
		case datalist.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				dl.Kind = value.String
			}
		case datalist.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				dl.Key = value.String
			}
		case datalist.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				dl.Value = value.String
			}
		case datalist.FieldItemOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_order", values[i])
			} else if value.Valid {
				dl.ItemOrder = int(value.Int64)
			}
		default:
			dl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the DataList.
// This includes values selected through modifiers, order, etc.
func (dl *DataList) GetValue(name string) (ent.Value, error) {
	return dl.selectValues.Get(name)
}

// Update returns a builder for updating this DataList.
// Note that you need to call DataList.Unwrap() before calling this method if this DataList
// was returned from a transaction, and the transaction was committed or rolled back.
func (dl *DataList) Update() *DataListUpdateOne {
	return NewDataListClient(dl.config).UpdateOne(dl)
}

// Unwrap unwraps the DataList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dl *DataList) Unwrap() *DataList {
	_tx, ok := dl.config.driver.(*txDriver)
	if !ok {
		panic("ent: DataList is not a transactional entity")
	}
	dl.config.driver = _tx.drv
	return dl
}

// String implements the fmt.Stringer.
func (dl *DataList) String() string {
	var builder strings.Builder
	builder.WriteString("DataList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dl.ID))
	builder.WriteString("create_time=")
	builder.WriteString(dl.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dl.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(dl.Label)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(dl.Kind)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(dl.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(dl.Value)
	builder.WriteString(", ")
	builder.WriteString("item_order=")
	builder.WriteString(fmt.Sprintf("%v", dl.ItemOrder))
	builder.WriteByte(')')
	return builder.String()
}

// DataLists is a parsable slice of DataList.
type DataLists []*DataList
