// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enum

import (
	"fmt"
	"strings"
)

const (
	// ConfigKeySiteInfo is a ConfigKey of type site_info.
	ConfigKeySiteInfo ConfigKey = "site_info"
	// ConfigKeySiteTest is a ConfigKey of type site_test.
	ConfigKeySiteTest ConfigKey = "site_test"
	// ConfigKeySeoConfig is a ConfigKey of type seo_config.
	ConfigKeySeoConfig ConfigKey = "seo_config"
)

var ErrInvalidConfigKey = fmt.Errorf("not a valid ConfigKey, try [%s]", strings.Join(_ConfigKeyNames, ", "))

var _ConfigKeyNames = []string{
	string(ConfigKeySiteInfo),
	string(ConfigKeySiteTest),
	string(ConfigKeySeoConfig),
}

// ConfigKeyNames returns a list of possible string values of ConfigKey.
func ConfigKeyNames() []string {
	tmp := make([]string, len(_ConfigKeyNames))
	copy(tmp, _ConfigKeyNames)
	return tmp
}

// ConfigKeyValues returns a list of the values for ConfigKey
func ConfigKeyValues() []ConfigKey {
	return []ConfigKey{
		ConfigKeySiteInfo,
		ConfigKeySiteTest,
		ConfigKeySeoConfig,
	}
}

// String implements the Stringer interface.
func (x ConfigKey) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ConfigKey) IsValid() bool {
	_, err := ParseConfigKey(string(x))
	return err == nil
}

var _ConfigKeyValue = map[string]ConfigKey{
	"site_info":  ConfigKeySiteInfo,
	"site_test":  ConfigKeySiteTest,
	"seo_config": ConfigKeySeoConfig,
}

// ParseConfigKey attempts to convert a string to a ConfigKey.
func ParseConfigKey(name string) (ConfigKey, error) {
	if x, ok := _ConfigKeyValue[name]; ok {
		return x, nil
	}
	return ConfigKey(""), fmt.Errorf("%s is %w", name, ErrInvalidConfigKey)
}

// MarshalText implements the text marshaller method.
func (x ConfigKey) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ConfigKey) UnmarshalText(text []byte) error {
	tmp, err := ParseConfigKey(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
