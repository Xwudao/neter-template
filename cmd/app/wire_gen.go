// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Xwudao/neter-template/internal/biz"
	"github.com/Xwudao/neter-template/internal/cmd"
	"github.com/Xwudao/neter-template/internal/cron"
	"github.com/Xwudao/neter-template/internal/routes"
	"github.com/Xwudao/neter-template/internal/routes/v1"
	"github.com/Xwudao/neter-template/internal/system"
	"github.com/Xwudao/neter-template/pkg/config"
	"github.com/Xwudao/neter-template/pkg/logger"
)

// Injectors from wire.go:

func mainApp() (*cmd.MainApp, func(), error) {
	koanf, err := config.NewKoanf()
	if err != nil {
		return nil, nil, err
	}
	sugaredLogger, err := logger.NewLogger(koanf)
	if err != nil {
		return nil, nil, err
	}
	zapWriter := logger.NewZapWriter(sugaredLogger)
	engine := routes.NewEngine(zapWriter, koanf, sugaredLogger)
	appContext := system.NewAppContext()
	userBiz := biz.NewUserBiz(sugaredLogger, appContext)
	userRoute := v1.NewUserRoute(engine, userBiz, koanf)
	httpEngine, err := routes.NewHttpEngine(engine, koanf, sugaredLogger, appContext, userRoute)
	if err != nil {
		return nil, nil, err
	}
	cronCron, err := cron.NewCron(sugaredLogger)
	if err != nil {
		return nil, nil, err
	}
	initSystem := system.NewInitSystem(koanf)
	cmdMainApp, cleanup := cmd.NewMainApp(httpEngine, sugaredLogger, koanf, cronCron, initSystem)
	return cmdMainApp, func() {
		cleanup()
	}, nil
}
